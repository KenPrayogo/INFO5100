import org.junit.Assert;

public class Assignment3Test {
    @org.junit.Test
    public void findPowerOfThree() throws Exception {
        Assignment3 fn = new Assignment3();
        // Handle 0 - 5
        int[] result = {1,3,9,27,81};
        Assert.assertArrayEquals(result,fn.findPowerOfThree(5));
    }

    @org.junit.Test
    public void countDigits() throws Exception {
        Assignment3 fn = new Assignment3();
        // Handle 100
        int result = 1;
        Assert.assertEquals(result,fn.countDigits(100));
        // Handle 0
        result = 0;
        Assert.assertEquals(result,fn.countDigits(0));
        // Handle Negative
        result = -1;
        Assert.assertEquals(result,fn.countDigits(-99));
    }

    @org.junit.Test
    public void printNumbers() throws Exception {
        Assignment3 fn = new Assignment3();
        // Since this is a Print function, compare is slightly manual
        // unless we wanna change the code or read the console output.
        String expEven = "0 2 4 6 8 10";
        System.out.println("expected: " + expEven);
        fn.printNumbers(6);
        String expOdd = "1 3 5 7 9 11 13";
        System.out.println("expected: " + expOdd);
        fn.printNumbers(7);
        String expZero = "";
        System.out.println("expected: " + expZero);
        fn.printNumbers(0);
    }

    @org.junit.Test
    public void generatePascalsTriangle() throws Exception {
        Assignment3 fn = new Assignment3();
        // 5 levels
        int[][] result = {{1},{1,1},{1,2,1},{1,3,3,1},{1,4,6,4,1}};
        Assert.assertArrayEquals(result,fn.generatePascalsTriangle(5));
        // 0
        int[][] blank = {};
        Assert.assertArrayEquals(blank,fn.generatePascalsTriangle(0));
    }

    @org.junit.Test
    public void reverseVowels() throws Exception {
        Assignment3 fn = new Assignment3();
        // Same result
        String res = "Seattle";
        Assert.assertEquals(res,fn.reverseVowels("Seattle"));
        // Regular
        res = "holle";
        Assert.assertEquals(res,fn.reverseVowels("hello"));
        // With capitalization
        res = "aqaumAn";
        Assert.assertEquals(res,fn.reverseVowels("Aquaman"));
    }

    @org.junit.Test
    public void lengthOfLastWord() throws Exception {
        Assignment3 fn = new Assignment3();
        // 4 letters
        int res = 4;
        Assert.assertEquals(res,fn.lengthOfLastWord("A fox jumps over"));
        // No results
        res = 0;
        Assert.assertEquals(res,fn.lengthOfLastWord("Test double space  "));
        // One word
        res = 5;
        Assert.assertEquals(res,fn.lengthOfLastWord("Hello"));
    }

    @org.junit.Test
    public void reverseString2() throws Exception {
        Assignment3 fn = new Assignment3();
        // Regular
        String res = "soccer like I";
        Assert.assertEquals(res,fn.reverseString2("I like soccer"));
        // With multiple spaces
        res = "now?  about  How";
        Assert.assertEquals(res,fn.reverseString2("How  about  now?"));
    }

    @org.junit.Test
    public void checkMessage() throws Exception {
        Assignment3 fn = new Assignment3();
        // 3 changed
        int count = 3;
        Assert.assertEquals(count,fn.checkMessage("SOSSISSOSIIISXXSOSSOS"));
        // No change
        count = 0;
        Assert.assertEquals(count,fn.checkMessage("SOSSOSSOSSOS"));
        // Fragment - Only count every 3 so the rest is ignored
        count = 1;
        Assert.assertEquals(count,fn.checkMessage("SISSO"));
    }

}