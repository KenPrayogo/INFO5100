/*
 * Assignment #2
 * @author Ken Prayogo
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Person {
    int age;
    boolean gender;// false --> male, true --> female

    Person(int age, boolean gender) {
        this.age = age;
        this.gender = gender;
    }
}

public class Assignment2 {
    // Assignment
    /**
     * Write a Computer program to find the type of a person and print the type.
     * Infant : If the age is less than 1 year Toddler : If the age is less than
     * 3 and greater than 1 Pre Schooler : If the age is less than 5 and greater
     * than 3 KG Girl : If the age is greater than 5 and less than 6 and the
     * gender is female KG Boy : If the age is greater than 5 and less than 6
     * and the gender is male
     */
    public void personType(Person person) {
        if (person.age < 0) {
            System.out.printf("The age of a Person must be at least 0.");
        } else if (person.age < 1) {
            System.out.printf("Infant");
        } else if (person.age < 3) {
            System.out.printf("Toddler");
        } else if (person.age < 5) {
            System.out.printf("Pre-Schooler");
        } else if (person.age >= 5 && person.age < 6) {
            if (person.gender) {
                System.out.printf("KG Girl");
            } else {
                System.out.printf("KG Boy");
            }
        } else {
            System.out.printf("Person type of age " + person.age + " is undefined.");
        }
    }

    /**
     * Given an integer N as input, check the following: If N is odd, print
     * "Weird". If N is even and, in between the range of 2 and 5(inclusive),
     * print "Not Weird". If N is even and, in between the range of 6 and
     * 20(inclusive), print "Weird". If N is even and N>20, print "Not Weird".
     */
    public void weirdNumber(int n) {
        n = Math.abs(n); // Makes sure negative values are included
        boolean isEven = n % 2 == 0;
        if (isEven) {
            if ((n >= 2 && n < 5) || n > 20) {
                System.out.println("Not Weird");
            } else {
                System.out.println("Weird");
            }
        } else {
            System.out.println("Weird");
        }
    }

    /**
     * Write a method to determine whether a number is prime
     */
    public void isPrime(int n) {
        /* For numbers > 2, if it's divisible by 2 or any number
        *  up to the number itself, then it is not a prime number.
        */
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                System.out.println(n + " is not a prime number.");
                return;
            }
        }
        // Only divisible by 1 or itself, so it is a prime number
        System.out.println(n + " is a prime number.");
    }

    /**
     * Find N fibonacci numbers Fibonacci Number: f(N) = f(N-1)+f(N-2).
     * Typically, f(0)=f(1)=1.
     */
    public int[] fibonacciNumber(int n) {
        // Note: Using the Fibonacci sequence that doesn't include 0
        // Handle N = 0 like 1
        if (n == 0) {
            n = 1;
        }
        int[] fib = new int[n];
        fib[0] = 1; // Insert the first number
        for (int i = 1; i < n; i++) {
            if (i == 1) {
                fib[i] = 1; // Insert another 1 for the second value
            }
            else {
                fib[i] = fib[i - 2] + fib[i - 1]; // Add the previous 2 values
            }
        }
        return fib;
    }

    /**
     * Write a function that takes a string as input and returns the string
     * reversed. Given s = "hello", return "olleh".
     */
    public String reverseString(String s) {
        String reversed = "";
        for (int i = s.length() - 1; i >= 0; i--) {
            reversed += s.charAt(i);
        }
        return reversed;
    }

    /**
     * Given an array of nums, write a function to find the largest two integer.
     */
    public int[] findTheLargestTwo(int[] nums) {
        Arrays.sort(nums); // Sort in ascending order
        int[] largestTwo = {nums[nums.length - 1], nums[nums.length - 2]};
        return largestTwo;
    }

    /**
     * Given an array nums, write a function to move all 0's to the end of it
     * while maintaining the relative order of the non-zero elements. For
     * example, given nums = [0, 1, 0, 3, 12], after calling your function, nums
     * should be [1, 3, 12, 0, 0].
     */
    public void moveZeroes(int[] nums) {
        // Loop and take out each value, separating the zeroes
        List<Integer> zeroes = new ArrayList<>();
        List<Integer> numList = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                zeroes.add(nums[i]);
            } else {
                numList.add(nums[i]);
            }
        }
        // Loop through again and replace the numbers in order
        int counterZeroes = 0;
        int counterNums = 0;
        for (int i = 0; i < nums.length; i++) {
            if (counterNums < numList.size()) {
                nums[i] = numList.get(counterNums);
                counterNums++;
                continue;
            }
            if (counterZeroes < zeroes.size()) {
                nums[i] = zeroes.get(counterZeroes);
                counterZeroes++;
            }
        }
    }

    // Bonus
    /**
     * Given a non-negative integer n, repeatedly add all its digits until the
     * result has only one digit. For example: Given n = 38, the process is
     * like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
     */
    public int addDigits(int n) {
        int total = 10; // placeholder
        // Do the math as long as the total is of 2 digits
        while (total >= 10) {
            total = 0; // Reset total
            // Sum the digits into "total"
            while (n > 0) {
                total += n % 10;
                n = n / 10; // Takes out one digit
            }
            n = total; // Re-do loop with new "n"
        }
        return n;
    }

    /**
     * Write a program to check whether a given number is an ugly number. Ugly
     * numbers are positive numbers whose prime factors only include 2, 3, 5.
     * For example, 6, 8 are ugly, while 14 is not ugly since it includes
     * another prime factor 7. Note that 1 is typically treated as an ugly
     * number.
     */
    public boolean isUgly(int n) {
        if (n < 0) {
            System.out.println("Negative numbers are not ugly.");
            return false;
        } else if (n == 0) {
            throw new RuntimeException("0 does not have a factorization!");
        }
        List<Integer> pFactors = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                if (!pFactors.contains(i)) {
                    pFactors.add(i);
                }
                n /= i;
            }
        }
        for (int factor: pFactors) {
            if (factor != 2 && factor != 3 && factor != 5) {
                return false;
            }
        }
        return true;
    }
}